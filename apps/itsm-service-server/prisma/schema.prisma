datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Clients {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User?      @relation(fields: [userId], references: [id])
  userId        String?
  projectsItems Projects[]
}

model Services {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  projectsItems Projects[]
  tasksItems    Tasks[]
}

model Employees {
  id                    String             @id @default(cuid())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  user                  User?              @relation(fields: [userId], references: [id])
  userId                String?
  employeeProjectsItems EmployeeProjects[]
  employeeRolesItems    EmployeeRoles[]
  employeeTasksItems    EmployeeTasks[]
}

model DevelopmentStages {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tasksItems Tasks[]
}

model Statuses {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  projectsItems Projects[]
}

model EmployeeRoles {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  employee   Employees? @relation(fields: [employeeId], references: [id])
  employeeId String?
  role       Roles?     @relation(fields: [roleId], references: [id])
  roleId     String?
}

model Messages {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chats {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tasks {
  id                 String             @id @default(cuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  employeeTasksItems EmployeeTasks[]
  service            Services?          @relation(fields: [serviceId], references: [id])
  serviceId          String?
  developmentStage   DevelopmentStages? @relation(fields: [developmentStageId], references: [id])
  developmentStageId String?
}

model Roles {
  id                 String          @id @default(cuid())
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  employeeRolesItems EmployeeRoles[]
}

model EmployeeProjects {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  employee   Employees? @relation(fields: [employeeId], references: [id])
  employeeId String?
  project    Projects?  @relation(fields: [projectId], references: [id])
  projectId  String?
}

model EmployeeTasks {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  employee   Employees? @relation(fields: [employeeId], references: [id])
  employeeId String?
  task       Tasks?     @relation(fields: [taskId], references: [id])
  taskId     String?
}

model Requests {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  projectsItems Projects[]
}

model Incidents {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatParticipants {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Projects {
  id                    String             @id @default(cuid())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  employeeProjectsItems EmployeeProjects[]
  service               Services?          @relation(fields: [serviceId], references: [id])
  serviceId             String?
  client                Clients?           @relation(fields: [clientId], references: [id])
  clientId              String?
  status                Statuses?          @relation(fields: [statusId], references: [id])
  statusId              String?
  request               Requests?          @relation(fields: [requestId], references: [id])
  requestId             String?
}

model User {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  firstName      String?
  lastName       String?
  username       String      @unique
  email          String?     @unique
  password       String
  roles          Json
  employeesItems Employees[]
  clientsItems   Clients[]
}
