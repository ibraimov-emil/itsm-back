/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ChatParticipants as PrismaChatParticipants,
} from "@prisma/client";

export class ChatParticipantsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChatParticipantsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chatParticipants.count(args);
  }

  async chatParticipantsItems(
    args: Prisma.ChatParticipantsFindManyArgs
  ): Promise<PrismaChatParticipants[]> {
    return this.prisma.chatParticipants.findMany(args);
  }
  async chatParticipants(
    args: Prisma.ChatParticipantsFindUniqueArgs
  ): Promise<PrismaChatParticipants | null> {
    return this.prisma.chatParticipants.findUnique(args);
  }
  async createChatParticipants(
    args: Prisma.ChatParticipantsCreateArgs
  ): Promise<PrismaChatParticipants> {
    return this.prisma.chatParticipants.create(args);
  }
  async updateChatParticipants(
    args: Prisma.ChatParticipantsUpdateArgs
  ): Promise<PrismaChatParticipants> {
    return this.prisma.chatParticipants.update(args);
  }
  async deleteChatParticipants(
    args: Prisma.ChatParticipantsDeleteArgs
  ): Promise<PrismaChatParticipants> {
    return this.prisma.chatParticipants.delete(args);
  }
}
