/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RolesService } from "../roles.service";
import { RolesCreateInput } from "./RolesCreateInput";
import { Roles } from "./Roles";
import { RolesFindManyArgs } from "./RolesFindManyArgs";
import { RolesWhereUniqueInput } from "./RolesWhereUniqueInput";
import { RolesUpdateInput } from "./RolesUpdateInput";
import { EmployeeRolesFindManyArgs } from "../../employeeRoles/base/EmployeeRolesFindManyArgs";
import { EmployeeRoles } from "../../employeeRoles/base/EmployeeRoles";
import { EmployeeRolesWhereUniqueInput } from "../../employeeRoles/base/EmployeeRolesWhereUniqueInput";

export class RolesControllerBase {
  constructor(protected readonly service: RolesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Roles })
  async createRoles(@common.Body() data: RolesCreateInput): Promise<Roles> {
    return await this.service.createRoles({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Roles] })
  @ApiNestedQuery(RolesFindManyArgs)
  async rolesItems(@common.Req() request: Request): Promise<Roles[]> {
    const args = plainToClass(RolesFindManyArgs, request.query);
    return this.service.rolesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Roles })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async roles(
    @common.Param() params: RolesWhereUniqueInput
  ): Promise<Roles | null> {
    const result = await this.service.roles({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Roles })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRoles(
    @common.Param() params: RolesWhereUniqueInput,
    @common.Body() data: RolesUpdateInput
  ): Promise<Roles | null> {
    try {
      return await this.service.updateRoles({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Roles })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRoles(
    @common.Param() params: RolesWhereUniqueInput
  ): Promise<Roles | null> {
    try {
      return await this.service.deleteRoles({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/employeeRolesItems")
  @ApiNestedQuery(EmployeeRolesFindManyArgs)
  async findEmployeeRolesItems(
    @common.Req() request: Request,
    @common.Param() params: RolesWhereUniqueInput
  ): Promise<EmployeeRoles[]> {
    const query = plainToClass(EmployeeRolesFindManyArgs, request.query);
    const results = await this.service.findEmployeeRolesItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeRolesItems")
  async connectEmployeeRolesItems(
    @common.Param() params: RolesWhereUniqueInput,
    @common.Body() body: EmployeeRolesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRolesItems: {
        connect: body,
      },
    };
    await this.service.updateRoles({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeRolesItems")
  async updateEmployeeRolesItems(
    @common.Param() params: RolesWhereUniqueInput,
    @common.Body() body: EmployeeRolesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRolesItems: {
        set: body,
      },
    };
    await this.service.updateRoles({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeRolesItems")
  async disconnectEmployeeRolesItems(
    @common.Param() params: RolesWhereUniqueInput,
    @common.Body() body: EmployeeRolesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRolesItems: {
        disconnect: body,
      },
    };
    await this.service.updateRoles({
      where: params,
      data,
      select: { id: true },
    });
  }
}
