/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmployeeTasks as PrismaEmployeeTasks,
  Employees as PrismaEmployees,
  Tasks as PrismaTasks,
} from "@prisma/client";

export class EmployeeTasksServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeTasksCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeTasks.count(args);
  }

  async employeeTasksItems(
    args: Prisma.EmployeeTasksFindManyArgs
  ): Promise<PrismaEmployeeTasks[]> {
    return this.prisma.employeeTasks.findMany(args);
  }
  async employeeTasks(
    args: Prisma.EmployeeTasksFindUniqueArgs
  ): Promise<PrismaEmployeeTasks | null> {
    return this.prisma.employeeTasks.findUnique(args);
  }
  async createEmployeeTasks(
    args: Prisma.EmployeeTasksCreateArgs
  ): Promise<PrismaEmployeeTasks> {
    return this.prisma.employeeTasks.create(args);
  }
  async updateEmployeeTasks(
    args: Prisma.EmployeeTasksUpdateArgs
  ): Promise<PrismaEmployeeTasks> {
    return this.prisma.employeeTasks.update(args);
  }
  async deleteEmployeeTasks(
    args: Prisma.EmployeeTasksDeleteArgs
  ): Promise<PrismaEmployeeTasks> {
    return this.prisma.employeeTasks.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployees | null> {
    return this.prisma.employeeTasks
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getTask(parentId: string): Promise<PrismaTasks | null> {
    return this.prisma.employeeTasks
      .findUnique({
        where: { id: parentId },
      })
      .task();
  }
}
