/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmployeeTasks } from "./EmployeeTasks";
import { EmployeeTasksCountArgs } from "./EmployeeTasksCountArgs";
import { EmployeeTasksFindManyArgs } from "./EmployeeTasksFindManyArgs";
import { EmployeeTasksFindUniqueArgs } from "./EmployeeTasksFindUniqueArgs";
import { CreateEmployeeTasksArgs } from "./CreateEmployeeTasksArgs";
import { UpdateEmployeeTasksArgs } from "./UpdateEmployeeTasksArgs";
import { DeleteEmployeeTasksArgs } from "./DeleteEmployeeTasksArgs";
import { Employees } from "../../employees/base/Employees";
import { Tasks } from "../../tasks/base/Tasks";
import { EmployeeTasksService } from "../employeeTasks.service";
@graphql.Resolver(() => EmployeeTasks)
export class EmployeeTasksResolverBase {
  constructor(protected readonly service: EmployeeTasksService) {}

  async _employeeTasksItemsMeta(
    @graphql.Args() args: EmployeeTasksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeTasks])
  async employeeTasksItems(
    @graphql.Args() args: EmployeeTasksFindManyArgs
  ): Promise<EmployeeTasks[]> {
    return this.service.employeeTasksItems(args);
  }

  @graphql.Query(() => EmployeeTasks, { nullable: true })
  async employeeTasks(
    @graphql.Args() args: EmployeeTasksFindUniqueArgs
  ): Promise<EmployeeTasks | null> {
    const result = await this.service.employeeTasks(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeTasks)
  async createEmployeeTasks(
    @graphql.Args() args: CreateEmployeeTasksArgs
  ): Promise<EmployeeTasks> {
    return await this.service.createEmployeeTasks({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        task: args.data.task
          ? {
              connect: args.data.task,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeeTasks)
  async updateEmployeeTasks(
    @graphql.Args() args: UpdateEmployeeTasksArgs
  ): Promise<EmployeeTasks | null> {
    try {
      return await this.service.updateEmployeeTasks({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          task: args.data.task
            ? {
                connect: args.data.task,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeTasks)
  async deleteEmployeeTasks(
    @graphql.Args() args: DeleteEmployeeTasksArgs
  ): Promise<EmployeeTasks | null> {
    try {
      return await this.service.deleteEmployeeTasks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employees, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: EmployeeTasks
  ): Promise<Employees | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tasks, {
    nullable: true,
    name: "task",
  })
  async getTask(
    @graphql.Parent() parent: EmployeeTasks
  ): Promise<Tasks | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
