/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChatsService } from "../chats.service";
import { ChatsCreateInput } from "./ChatsCreateInput";
import { Chats } from "./Chats";
import { ChatsFindManyArgs } from "./ChatsFindManyArgs";
import { ChatsWhereUniqueInput } from "./ChatsWhereUniqueInput";
import { ChatsUpdateInput } from "./ChatsUpdateInput";

export class ChatsControllerBase {
  constructor(protected readonly service: ChatsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Chats })
  async createChats(@common.Body() data: ChatsCreateInput): Promise<Chats> {
    return await this.service.createChats({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Chats] })
  @ApiNestedQuery(ChatsFindManyArgs)
  async chatsItems(@common.Req() request: Request): Promise<Chats[]> {
    const args = plainToClass(ChatsFindManyArgs, request.query);
    return this.service.chatsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Chats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chats(
    @common.Param() params: ChatsWhereUniqueInput
  ): Promise<Chats | null> {
    const result = await this.service.chats({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Chats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChats(
    @common.Param() params: ChatsWhereUniqueInput,
    @common.Body() data: ChatsUpdateInput
  ): Promise<Chats | null> {
    try {
      return await this.service.updateChats({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Chats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChats(
    @common.Param() params: ChatsWhereUniqueInput
  ): Promise<Chats | null> {
    try {
      return await this.service.deleteChats({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
