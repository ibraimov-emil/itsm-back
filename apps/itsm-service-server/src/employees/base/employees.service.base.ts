/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Employees as PrismaEmployees,
  EmployeeProjects as PrismaEmployeeProjects,
  EmployeeRoles as PrismaEmployeeRoles,
  EmployeeTasks as PrismaEmployeeTasks,
  User as PrismaUser,
} from "@prisma/client";

export class EmployeesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employees.count(args);
  }

  async employeesItems(
    args: Prisma.EmployeesFindManyArgs
  ): Promise<PrismaEmployees[]> {
    return this.prisma.employees.findMany(args);
  }
  async employees(
    args: Prisma.EmployeesFindUniqueArgs
  ): Promise<PrismaEmployees | null> {
    return this.prisma.employees.findUnique(args);
  }
  async createEmployees(
    args: Prisma.EmployeesCreateArgs
  ): Promise<PrismaEmployees> {
    return this.prisma.employees.create(args);
  }
  async updateEmployees(
    args: Prisma.EmployeesUpdateArgs
  ): Promise<PrismaEmployees> {
    return this.prisma.employees.update(args);
  }
  async deleteEmployees(
    args: Prisma.EmployeesDeleteArgs
  ): Promise<PrismaEmployees> {
    return this.prisma.employees.delete(args);
  }

  async findEmployeeProjectsItems(
    parentId: string,
    args: Prisma.EmployeeProjectsFindManyArgs
  ): Promise<PrismaEmployeeProjects[]> {
    return this.prisma.employees
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeProjectsItems(args);
  }

  async findEmployeeRolesItems(
    parentId: string,
    args: Prisma.EmployeeRolesFindManyArgs
  ): Promise<PrismaEmployeeRoles[]> {
    return this.prisma.employees
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeRolesItems(args);
  }

  async findEmployeeTasksItems(
    parentId: string,
    args: Prisma.EmployeeTasksFindManyArgs
  ): Promise<PrismaEmployeeTasks[]> {
    return this.prisma.employees
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeTasksItems(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.employees
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
