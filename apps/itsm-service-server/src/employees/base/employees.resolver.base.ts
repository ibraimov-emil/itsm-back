/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Employees } from "./Employees";
import { EmployeesCountArgs } from "./EmployeesCountArgs";
import { EmployeesFindManyArgs } from "./EmployeesFindManyArgs";
import { EmployeesFindUniqueArgs } from "./EmployeesFindUniqueArgs";
import { CreateEmployeesArgs } from "./CreateEmployeesArgs";
import { UpdateEmployeesArgs } from "./UpdateEmployeesArgs";
import { DeleteEmployeesArgs } from "./DeleteEmployeesArgs";
import { EmployeeProjectsFindManyArgs } from "../../employeeProjects/base/EmployeeProjectsFindManyArgs";
import { EmployeeProjects } from "../../employeeProjects/base/EmployeeProjects";
import { EmployeeRolesFindManyArgs } from "../../employeeRoles/base/EmployeeRolesFindManyArgs";
import { EmployeeRoles } from "../../employeeRoles/base/EmployeeRoles";
import { EmployeeTasksFindManyArgs } from "../../employeeTasks/base/EmployeeTasksFindManyArgs";
import { EmployeeTasks } from "../../employeeTasks/base/EmployeeTasks";
import { User } from "../../user/base/User";
import { EmployeesService } from "../employees.service";
@graphql.Resolver(() => Employees)
export class EmployeesResolverBase {
  constructor(protected readonly service: EmployeesService) {}

  async _employeesItemsMeta(
    @graphql.Args() args: EmployeesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Employees])
  async employeesItems(
    @graphql.Args() args: EmployeesFindManyArgs
  ): Promise<Employees[]> {
    return this.service.employeesItems(args);
  }

  @graphql.Query(() => Employees, { nullable: true })
  async employees(
    @graphql.Args() args: EmployeesFindUniqueArgs
  ): Promise<Employees | null> {
    const result = await this.service.employees(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Employees)
  async createEmployees(
    @graphql.Args() args: CreateEmployeesArgs
  ): Promise<Employees> {
    return await this.service.createEmployees({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Employees)
  async updateEmployees(
    @graphql.Args() args: UpdateEmployeesArgs
  ): Promise<Employees | null> {
    try {
      return await this.service.updateEmployees({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Employees)
  async deleteEmployees(
    @graphql.Args() args: DeleteEmployeesArgs
  ): Promise<Employees | null> {
    try {
      return await this.service.deleteEmployees(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EmployeeProjects], {
    name: "employeeProjectsItems",
  })
  async findEmployeeProjectsItems(
    @graphql.Parent() parent: Employees,
    @graphql.Args() args: EmployeeProjectsFindManyArgs
  ): Promise<EmployeeProjects[]> {
    const results = await this.service.findEmployeeProjectsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeRoles], { name: "employeeRolesItems" })
  async findEmployeeRolesItems(
    @graphql.Parent() parent: Employees,
    @graphql.Args() args: EmployeeRolesFindManyArgs
  ): Promise<EmployeeRoles[]> {
    const results = await this.service.findEmployeeRolesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EmployeeTasks], { name: "employeeTasksItems" })
  async findEmployeeTasksItems(
    @graphql.Parent() parent: Employees,
    @graphql.Args() args: EmployeeTasksFindManyArgs
  ): Promise<EmployeeTasks[]> {
    const results = await this.service.findEmployeeTasksItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Employees): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
