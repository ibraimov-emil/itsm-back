/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeesService } from "../employees.service";
import { EmployeesCreateInput } from "./EmployeesCreateInput";
import { Employees } from "./Employees";
import { EmployeesFindManyArgs } from "./EmployeesFindManyArgs";
import { EmployeesWhereUniqueInput } from "./EmployeesWhereUniqueInput";
import { EmployeesUpdateInput } from "./EmployeesUpdateInput";
import { EmployeeProjectsFindManyArgs } from "../../employeeProjects/base/EmployeeProjectsFindManyArgs";
import { EmployeeProjects } from "../../employeeProjects/base/EmployeeProjects";
import { EmployeeProjectsWhereUniqueInput } from "../../employeeProjects/base/EmployeeProjectsWhereUniqueInput";
import { EmployeeRolesFindManyArgs } from "../../employeeRoles/base/EmployeeRolesFindManyArgs";
import { EmployeeRoles } from "../../employeeRoles/base/EmployeeRoles";
import { EmployeeRolesWhereUniqueInput } from "../../employeeRoles/base/EmployeeRolesWhereUniqueInput";
import { EmployeeTasksFindManyArgs } from "../../employeeTasks/base/EmployeeTasksFindManyArgs";
import { EmployeeTasks } from "../../employeeTasks/base/EmployeeTasks";
import { EmployeeTasksWhereUniqueInput } from "../../employeeTasks/base/EmployeeTasksWhereUniqueInput";

export class EmployeesControllerBase {
  constructor(protected readonly service: EmployeesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Employees })
  async createEmployees(
    @common.Body() data: EmployeesCreateInput
  ): Promise<Employees> {
    return await this.service.createEmployees({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Employees] })
  @ApiNestedQuery(EmployeesFindManyArgs)
  async employeesItems(@common.Req() request: Request): Promise<Employees[]> {
    const args = plainToClass(EmployeesFindManyArgs, request.query);
    return this.service.employeesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Employees })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employees(
    @common.Param() params: EmployeesWhereUniqueInput
  ): Promise<Employees | null> {
    const result = await this.service.employees({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Employees })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployees(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() data: EmployeesUpdateInput
  ): Promise<Employees | null> {
    try {
      return await this.service.updateEmployees({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Employees })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployees(
    @common.Param() params: EmployeesWhereUniqueInput
  ): Promise<Employees | null> {
    try {
      return await this.service.deleteEmployees({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/employeeProjectsItems")
  @ApiNestedQuery(EmployeeProjectsFindManyArgs)
  async findEmployeeProjectsItems(
    @common.Req() request: Request,
    @common.Param() params: EmployeesWhereUniqueInput
  ): Promise<EmployeeProjects[]> {
    const query = plainToClass(EmployeeProjectsFindManyArgs, request.query);
    const results = await this.service.findEmployeeProjectsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeProjectsItems")
  async connectEmployeeProjectsItems(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() body: EmployeeProjectsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeProjectsItems: {
        connect: body,
      },
    };
    await this.service.updateEmployees({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeProjectsItems")
  async updateEmployeeProjectsItems(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() body: EmployeeProjectsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeProjectsItems: {
        set: body,
      },
    };
    await this.service.updateEmployees({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeProjectsItems")
  async disconnectEmployeeProjectsItems(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() body: EmployeeProjectsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeProjectsItems: {
        disconnect: body,
      },
    };
    await this.service.updateEmployees({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeRolesItems")
  @ApiNestedQuery(EmployeeRolesFindManyArgs)
  async findEmployeeRolesItems(
    @common.Req() request: Request,
    @common.Param() params: EmployeesWhereUniqueInput
  ): Promise<EmployeeRoles[]> {
    const query = plainToClass(EmployeeRolesFindManyArgs, request.query);
    const results = await this.service.findEmployeeRolesItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeRolesItems")
  async connectEmployeeRolesItems(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() body: EmployeeRolesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRolesItems: {
        connect: body,
      },
    };
    await this.service.updateEmployees({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeRolesItems")
  async updateEmployeeRolesItems(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() body: EmployeeRolesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRolesItems: {
        set: body,
      },
    };
    await this.service.updateEmployees({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeRolesItems")
  async disconnectEmployeeRolesItems(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() body: EmployeeRolesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRolesItems: {
        disconnect: body,
      },
    };
    await this.service.updateEmployees({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeTasksItems")
  @ApiNestedQuery(EmployeeTasksFindManyArgs)
  async findEmployeeTasksItems(
    @common.Req() request: Request,
    @common.Param() params: EmployeesWhereUniqueInput
  ): Promise<EmployeeTasks[]> {
    const query = plainToClass(EmployeeTasksFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasksItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasksItems")
  async connectEmployeeTasksItems(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() body: EmployeeTasksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksItems: {
        connect: body,
      },
    };
    await this.service.updateEmployees({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasksItems")
  async updateEmployeeTasksItems(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() body: EmployeeTasksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksItems: {
        set: body,
      },
    };
    await this.service.updateEmployees({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasksItems")
  async disconnectEmployeeTasksItems(
    @common.Param() params: EmployeesWhereUniqueInput,
    @common.Body() body: EmployeeTasksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksItems: {
        disconnect: body,
      },
    };
    await this.service.updateEmployees({
      where: params,
      data,
      select: { id: true },
    });
  }
}
