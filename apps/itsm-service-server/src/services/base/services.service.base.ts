/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Services as PrismaServices,
  Projects as PrismaProjects,
  Tasks as PrismaTasks,
} from "@prisma/client";

export class ServicesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ServicesCountArgs, "select">): Promise<number> {
    return this.prisma.services.count(args);
  }

  async servicesItems(
    args: Prisma.ServicesFindManyArgs
  ): Promise<PrismaServices[]> {
    return this.prisma.services.findMany(args);
  }
  async services(
    args: Prisma.ServicesFindUniqueArgs
  ): Promise<PrismaServices | null> {
    return this.prisma.services.findUnique(args);
  }
  async createServices(
    args: Prisma.ServicesCreateArgs
  ): Promise<PrismaServices> {
    return this.prisma.services.create(args);
  }
  async updateServices(
    args: Prisma.ServicesUpdateArgs
  ): Promise<PrismaServices> {
    return this.prisma.services.update(args);
  }
  async deleteServices(
    args: Prisma.ServicesDeleteArgs
  ): Promise<PrismaServices> {
    return this.prisma.services.delete(args);
  }

  async findProjectsItems(
    parentId: string,
    args: Prisma.ProjectsFindManyArgs
  ): Promise<PrismaProjects[]> {
    return this.prisma.services
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .projectsItems(args);
  }

  async findTasksItems(
    parentId: string,
    args: Prisma.TasksFindManyArgs
  ): Promise<PrismaTasks[]> {
    return this.prisma.services
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tasksItems(args);
  }
}
