/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Tasks as PrismaTasks,
  EmployeeTasks as PrismaEmployeeTasks,
  Services as PrismaServices,
  DevelopmentStages as PrismaDevelopmentStages,
} from "@prisma/client";

export class TasksServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TasksCountArgs, "select">): Promise<number> {
    return this.prisma.tasks.count(args);
  }

  async tasksItems(args: Prisma.TasksFindManyArgs): Promise<PrismaTasks[]> {
    return this.prisma.tasks.findMany(args);
  }
  async tasks(args: Prisma.TasksFindUniqueArgs): Promise<PrismaTasks | null> {
    return this.prisma.tasks.findUnique(args);
  }
  async createTasks(args: Prisma.TasksCreateArgs): Promise<PrismaTasks> {
    return this.prisma.tasks.create(args);
  }
  async updateTasks(args: Prisma.TasksUpdateArgs): Promise<PrismaTasks> {
    return this.prisma.tasks.update(args);
  }
  async deleteTasks(args: Prisma.TasksDeleteArgs): Promise<PrismaTasks> {
    return this.prisma.tasks.delete(args);
  }

  async findEmployeeTasksItems(
    parentId: string,
    args: Prisma.EmployeeTasksFindManyArgs
  ): Promise<PrismaEmployeeTasks[]> {
    return this.prisma.tasks
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeTasksItems(args);
  }

  async getService(parentId: string): Promise<PrismaServices | null> {
    return this.prisma.tasks
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }

  async getDevelopmentStage(
    parentId: string
  ): Promise<PrismaDevelopmentStages | null> {
    return this.prisma.tasks
      .findUnique({
        where: { id: parentId },
      })
      .developmentStage();
  }
}
