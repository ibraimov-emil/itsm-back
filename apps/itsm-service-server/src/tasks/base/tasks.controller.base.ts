/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TasksService } from "../tasks.service";
import { TasksCreateInput } from "./TasksCreateInput";
import { Tasks } from "./Tasks";
import { TasksFindManyArgs } from "./TasksFindManyArgs";
import { TasksWhereUniqueInput } from "./TasksWhereUniqueInput";
import { TasksUpdateInput } from "./TasksUpdateInput";
import { EmployeeTasksFindManyArgs } from "../../employeeTasks/base/EmployeeTasksFindManyArgs";
import { EmployeeTasks } from "../../employeeTasks/base/EmployeeTasks";
import { EmployeeTasksWhereUniqueInput } from "../../employeeTasks/base/EmployeeTasksWhereUniqueInput";

export class TasksControllerBase {
  constructor(protected readonly service: TasksService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tasks })
  async createTasks(@common.Body() data: TasksCreateInput): Promise<Tasks> {
    return await this.service.createTasks({
      data: {
        ...data,

        service: data.service
          ? {
              connect: data.service,
            }
          : undefined,

        developmentStage: data.developmentStage
          ? {
              connect: data.developmentStage,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        service: {
          select: {
            id: true,
          },
        },

        developmentStage: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tasks] })
  @ApiNestedQuery(TasksFindManyArgs)
  async tasksItems(@common.Req() request: Request): Promise<Tasks[]> {
    const args = plainToClass(TasksFindManyArgs, request.query);
    return this.service.tasksItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        service: {
          select: {
            id: true,
          },
        },

        developmentStage: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tasks })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tasks(
    @common.Param() params: TasksWhereUniqueInput
  ): Promise<Tasks | null> {
    const result = await this.service.tasks({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        service: {
          select: {
            id: true,
          },
        },

        developmentStage: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tasks })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTasks(
    @common.Param() params: TasksWhereUniqueInput,
    @common.Body() data: TasksUpdateInput
  ): Promise<Tasks | null> {
    try {
      return await this.service.updateTasks({
        where: params,
        data: {
          ...data,

          service: data.service
            ? {
                connect: data.service,
              }
            : undefined,

          developmentStage: data.developmentStage
            ? {
                connect: data.developmentStage,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          service: {
            select: {
              id: true,
            },
          },

          developmentStage: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tasks })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTasks(
    @common.Param() params: TasksWhereUniqueInput
  ): Promise<Tasks | null> {
    try {
      return await this.service.deleteTasks({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          service: {
            select: {
              id: true,
            },
          },

          developmentStage: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/employeeTasksItems")
  @ApiNestedQuery(EmployeeTasksFindManyArgs)
  async findEmployeeTasksItems(
    @common.Req() request: Request,
    @common.Param() params: TasksWhereUniqueInput
  ): Promise<EmployeeTasks[]> {
    const query = plainToClass(EmployeeTasksFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasksItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasksItems")
  async connectEmployeeTasksItems(
    @common.Param() params: TasksWhereUniqueInput,
    @common.Body() body: EmployeeTasksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksItems: {
        connect: body,
      },
    };
    await this.service.updateTasks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasksItems")
  async updateEmployeeTasksItems(
    @common.Param() params: TasksWhereUniqueInput,
    @common.Body() body: EmployeeTasksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksItems: {
        set: body,
      },
    };
    await this.service.updateTasks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasksItems")
  async disconnectEmployeeTasksItems(
    @common.Param() params: TasksWhereUniqueInput,
    @common.Body() body: EmployeeTasksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasksItems: {
        disconnect: body,
      },
    };
    await this.service.updateTasks({
      where: params,
      data,
      select: { id: true },
    });
  }
}
