/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Tasks } from "./Tasks";
import { TasksCountArgs } from "./TasksCountArgs";
import { TasksFindManyArgs } from "./TasksFindManyArgs";
import { TasksFindUniqueArgs } from "./TasksFindUniqueArgs";
import { CreateTasksArgs } from "./CreateTasksArgs";
import { UpdateTasksArgs } from "./UpdateTasksArgs";
import { DeleteTasksArgs } from "./DeleteTasksArgs";
import { EmployeeTasksFindManyArgs } from "../../employeeTasks/base/EmployeeTasksFindManyArgs";
import { EmployeeTasks } from "../../employeeTasks/base/EmployeeTasks";
import { Services } from "../../services/base/Services";
import { DevelopmentStages } from "../../developmentStages/base/DevelopmentStages";
import { TasksService } from "../tasks.service";
@graphql.Resolver(() => Tasks)
export class TasksResolverBase {
  constructor(protected readonly service: TasksService) {}

  async _tasksItemsMeta(
    @graphql.Args() args: TasksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tasks])
  async tasksItems(@graphql.Args() args: TasksFindManyArgs): Promise<Tasks[]> {
    return this.service.tasksItems(args);
  }

  @graphql.Query(() => Tasks, { nullable: true })
  async tasks(
    @graphql.Args() args: TasksFindUniqueArgs
  ): Promise<Tasks | null> {
    const result = await this.service.tasks(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tasks)
  async createTasks(@graphql.Args() args: CreateTasksArgs): Promise<Tasks> {
    return await this.service.createTasks({
      ...args,
      data: {
        ...args.data,

        service: args.data.service
          ? {
              connect: args.data.service,
            }
          : undefined,

        developmentStage: args.data.developmentStage
          ? {
              connect: args.data.developmentStage,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Tasks)
  async updateTasks(
    @graphql.Args() args: UpdateTasksArgs
  ): Promise<Tasks | null> {
    try {
      return await this.service.updateTasks({
        ...args,
        data: {
          ...args.data,

          service: args.data.service
            ? {
                connect: args.data.service,
              }
            : undefined,

          developmentStage: args.data.developmentStage
            ? {
                connect: args.data.developmentStage,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tasks)
  async deleteTasks(
    @graphql.Args() args: DeleteTasksArgs
  ): Promise<Tasks | null> {
    try {
      return await this.service.deleteTasks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EmployeeTasks], { name: "employeeTasksItems" })
  async findEmployeeTasksItems(
    @graphql.Parent() parent: Tasks,
    @graphql.Args() args: EmployeeTasksFindManyArgs
  ): Promise<EmployeeTasks[]> {
    const results = await this.service.findEmployeeTasksItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Services, {
    nullable: true,
    name: "service",
  })
  async getService(@graphql.Parent() parent: Tasks): Promise<Services | null> {
    const result = await this.service.getService(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => DevelopmentStages, {
    nullable: true,
    name: "developmentStage",
  })
  async getDevelopmentStage(
    @graphql.Parent() parent: Tasks
  ): Promise<DevelopmentStages | null> {
    const result = await this.service.getDevelopmentStage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
