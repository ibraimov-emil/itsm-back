/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Statuses as PrismaStatuses,
  Projects as PrismaProjects,
} from "@prisma/client";

export class StatusesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StatusesCountArgs, "select">): Promise<number> {
    return this.prisma.statuses.count(args);
  }

  async statusesItems(
    args: Prisma.StatusesFindManyArgs
  ): Promise<PrismaStatuses[]> {
    return this.prisma.statuses.findMany(args);
  }
  async statuses(
    args: Prisma.StatusesFindUniqueArgs
  ): Promise<PrismaStatuses | null> {
    return this.prisma.statuses.findUnique(args);
  }
  async createStatuses(
    args: Prisma.StatusesCreateArgs
  ): Promise<PrismaStatuses> {
    return this.prisma.statuses.create(args);
  }
  async updateStatuses(
    args: Prisma.StatusesUpdateArgs
  ): Promise<PrismaStatuses> {
    return this.prisma.statuses.update(args);
  }
  async deleteStatuses(
    args: Prisma.StatusesDeleteArgs
  ): Promise<PrismaStatuses> {
    return this.prisma.statuses.delete(args);
  }

  async findProjectsItems(
    parentId: string,
    args: Prisma.ProjectsFindManyArgs
  ): Promise<PrismaProjects[]> {
    return this.prisma.statuses
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .projectsItems(args);
  }
}
