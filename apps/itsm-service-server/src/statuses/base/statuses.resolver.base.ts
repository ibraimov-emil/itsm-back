/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Statuses } from "./Statuses";
import { StatusesCountArgs } from "./StatusesCountArgs";
import { StatusesFindManyArgs } from "./StatusesFindManyArgs";
import { StatusesFindUniqueArgs } from "./StatusesFindUniqueArgs";
import { CreateStatusesArgs } from "./CreateStatusesArgs";
import { UpdateStatusesArgs } from "./UpdateStatusesArgs";
import { DeleteStatusesArgs } from "./DeleteStatusesArgs";
import { ProjectsFindManyArgs } from "../../projects/base/ProjectsFindManyArgs";
import { Projects } from "../../projects/base/Projects";
import { StatusesService } from "../statuses.service";
@graphql.Resolver(() => Statuses)
export class StatusesResolverBase {
  constructor(protected readonly service: StatusesService) {}

  async _statusesItemsMeta(
    @graphql.Args() args: StatusesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Statuses])
  async statusesItems(
    @graphql.Args() args: StatusesFindManyArgs
  ): Promise<Statuses[]> {
    return this.service.statusesItems(args);
  }

  @graphql.Query(() => Statuses, { nullable: true })
  async statuses(
    @graphql.Args() args: StatusesFindUniqueArgs
  ): Promise<Statuses | null> {
    const result = await this.service.statuses(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Statuses)
  async createStatuses(
    @graphql.Args() args: CreateStatusesArgs
  ): Promise<Statuses> {
    return await this.service.createStatuses({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Statuses)
  async updateStatuses(
    @graphql.Args() args: UpdateStatusesArgs
  ): Promise<Statuses | null> {
    try {
      return await this.service.updateStatuses({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Statuses)
  async deleteStatuses(
    @graphql.Args() args: DeleteStatusesArgs
  ): Promise<Statuses | null> {
    try {
      return await this.service.deleteStatuses(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Projects], { name: "projectsItems" })
  async findProjectsItems(
    @graphql.Parent() parent: Statuses,
    @graphql.Args() args: ProjectsFindManyArgs
  ): Promise<Projects[]> {
    const results = await this.service.findProjectsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
