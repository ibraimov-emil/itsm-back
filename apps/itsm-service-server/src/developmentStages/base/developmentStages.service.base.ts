/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DevelopmentStages as PrismaDevelopmentStages,
  Tasks as PrismaTasks,
} from "@prisma/client";

export class DevelopmentStagesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DevelopmentStagesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.developmentStages.count(args);
  }

  async developmentStagesItems(
    args: Prisma.DevelopmentStagesFindManyArgs
  ): Promise<PrismaDevelopmentStages[]> {
    return this.prisma.developmentStages.findMany(args);
  }
  async developmentStages(
    args: Prisma.DevelopmentStagesFindUniqueArgs
  ): Promise<PrismaDevelopmentStages | null> {
    return this.prisma.developmentStages.findUnique(args);
  }
  async createDevelopmentStages(
    args: Prisma.DevelopmentStagesCreateArgs
  ): Promise<PrismaDevelopmentStages> {
    return this.prisma.developmentStages.create(args);
  }
  async updateDevelopmentStages(
    args: Prisma.DevelopmentStagesUpdateArgs
  ): Promise<PrismaDevelopmentStages> {
    return this.prisma.developmentStages.update(args);
  }
  async deleteDevelopmentStages(
    args: Prisma.DevelopmentStagesDeleteArgs
  ): Promise<PrismaDevelopmentStages> {
    return this.prisma.developmentStages.delete(args);
  }

  async findTasksItems(
    parentId: string,
    args: Prisma.TasksFindManyArgs
  ): Promise<PrismaTasks[]> {
    return this.prisma.developmentStages
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tasksItems(args);
  }
}
