/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DevelopmentStages } from "./DevelopmentStages";
import { DevelopmentStagesCountArgs } from "./DevelopmentStagesCountArgs";
import { DevelopmentStagesFindManyArgs } from "./DevelopmentStagesFindManyArgs";
import { DevelopmentStagesFindUniqueArgs } from "./DevelopmentStagesFindUniqueArgs";
import { CreateDevelopmentStagesArgs } from "./CreateDevelopmentStagesArgs";
import { UpdateDevelopmentStagesArgs } from "./UpdateDevelopmentStagesArgs";
import { DeleteDevelopmentStagesArgs } from "./DeleteDevelopmentStagesArgs";
import { TasksFindManyArgs } from "../../tasks/base/TasksFindManyArgs";
import { Tasks } from "../../tasks/base/Tasks";
import { DevelopmentStagesService } from "../developmentStages.service";
@graphql.Resolver(() => DevelopmentStages)
export class DevelopmentStagesResolverBase {
  constructor(protected readonly service: DevelopmentStagesService) {}

  async _developmentStagesItemsMeta(
    @graphql.Args() args: DevelopmentStagesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DevelopmentStages])
  async developmentStagesItems(
    @graphql.Args() args: DevelopmentStagesFindManyArgs
  ): Promise<DevelopmentStages[]> {
    return this.service.developmentStagesItems(args);
  }

  @graphql.Query(() => DevelopmentStages, { nullable: true })
  async developmentStages(
    @graphql.Args() args: DevelopmentStagesFindUniqueArgs
  ): Promise<DevelopmentStages | null> {
    const result = await this.service.developmentStages(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DevelopmentStages)
  async createDevelopmentStages(
    @graphql.Args() args: CreateDevelopmentStagesArgs
  ): Promise<DevelopmentStages> {
    return await this.service.createDevelopmentStages({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DevelopmentStages)
  async updateDevelopmentStages(
    @graphql.Args() args: UpdateDevelopmentStagesArgs
  ): Promise<DevelopmentStages | null> {
    try {
      return await this.service.updateDevelopmentStages({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DevelopmentStages)
  async deleteDevelopmentStages(
    @graphql.Args() args: DeleteDevelopmentStagesArgs
  ): Promise<DevelopmentStages | null> {
    try {
      return await this.service.deleteDevelopmentStages(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Tasks], { name: "tasksItems" })
  async findTasksItems(
    @graphql.Parent() parent: DevelopmentStages,
    @graphql.Args() args: TasksFindManyArgs
  ): Promise<Tasks[]> {
    const results = await this.service.findTasksItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
