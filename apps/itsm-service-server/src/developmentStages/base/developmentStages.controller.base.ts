/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DevelopmentStagesService } from "../developmentStages.service";
import { DevelopmentStagesCreateInput } from "./DevelopmentStagesCreateInput";
import { DevelopmentStages } from "./DevelopmentStages";
import { DevelopmentStagesFindManyArgs } from "./DevelopmentStagesFindManyArgs";
import { DevelopmentStagesWhereUniqueInput } from "./DevelopmentStagesWhereUniqueInput";
import { DevelopmentStagesUpdateInput } from "./DevelopmentStagesUpdateInput";
import { TasksFindManyArgs } from "../../tasks/base/TasksFindManyArgs";
import { Tasks } from "../../tasks/base/Tasks";
import { TasksWhereUniqueInput } from "../../tasks/base/TasksWhereUniqueInput";

export class DevelopmentStagesControllerBase {
  constructor(protected readonly service: DevelopmentStagesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DevelopmentStages })
  async createDevelopmentStages(
    @common.Body() data: DevelopmentStagesCreateInput
  ): Promise<DevelopmentStages> {
    return await this.service.createDevelopmentStages({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DevelopmentStages] })
  @ApiNestedQuery(DevelopmentStagesFindManyArgs)
  async developmentStagesItems(
    @common.Req() request: Request
  ): Promise<DevelopmentStages[]> {
    const args = plainToClass(DevelopmentStagesFindManyArgs, request.query);
    return this.service.developmentStagesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DevelopmentStages })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async developmentStages(
    @common.Param() params: DevelopmentStagesWhereUniqueInput
  ): Promise<DevelopmentStages | null> {
    const result = await this.service.developmentStages({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DevelopmentStages })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDevelopmentStages(
    @common.Param() params: DevelopmentStagesWhereUniqueInput,
    @common.Body() data: DevelopmentStagesUpdateInput
  ): Promise<DevelopmentStages | null> {
    try {
      return await this.service.updateDevelopmentStages({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DevelopmentStages })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDevelopmentStages(
    @common.Param() params: DevelopmentStagesWhereUniqueInput
  ): Promise<DevelopmentStages | null> {
    try {
      return await this.service.deleteDevelopmentStages({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tasksItems")
  @ApiNestedQuery(TasksFindManyArgs)
  async findTasksItems(
    @common.Req() request: Request,
    @common.Param() params: DevelopmentStagesWhereUniqueInput
  ): Promise<Tasks[]> {
    const query = plainToClass(TasksFindManyArgs, request.query);
    const results = await this.service.findTasksItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        service: {
          select: {
            id: true,
          },
        },

        developmentStage: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tasksItems")
  async connectTasksItems(
    @common.Param() params: DevelopmentStagesWhereUniqueInput,
    @common.Body() body: TasksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tasksItems: {
        connect: body,
      },
    };
    await this.service.updateDevelopmentStages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tasksItems")
  async updateTasksItems(
    @common.Param() params: DevelopmentStagesWhereUniqueInput,
    @common.Body() body: TasksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tasksItems: {
        set: body,
      },
    };
    await this.service.updateDevelopmentStages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tasksItems")
  async disconnectTasksItems(
    @common.Param() params: DevelopmentStagesWhereUniqueInput,
    @common.Body() body: TasksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tasksItems: {
        disconnect: body,
      },
    };
    await this.service.updateDevelopmentStages({
      where: params,
      data,
      select: { id: true },
    });
  }
}
