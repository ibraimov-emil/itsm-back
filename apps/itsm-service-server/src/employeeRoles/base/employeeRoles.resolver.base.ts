/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmployeeRoles } from "./EmployeeRoles";
import { EmployeeRolesCountArgs } from "./EmployeeRolesCountArgs";
import { EmployeeRolesFindManyArgs } from "./EmployeeRolesFindManyArgs";
import { EmployeeRolesFindUniqueArgs } from "./EmployeeRolesFindUniqueArgs";
import { CreateEmployeeRolesArgs } from "./CreateEmployeeRolesArgs";
import { UpdateEmployeeRolesArgs } from "./UpdateEmployeeRolesArgs";
import { DeleteEmployeeRolesArgs } from "./DeleteEmployeeRolesArgs";
import { Employees } from "../../employees/base/Employees";
import { Roles } from "../../roles/base/Roles";
import { EmployeeRolesService } from "../employeeRoles.service";
@graphql.Resolver(() => EmployeeRoles)
export class EmployeeRolesResolverBase {
  constructor(protected readonly service: EmployeeRolesService) {}

  async _employeeRolesItemsMeta(
    @graphql.Args() args: EmployeeRolesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeRoles])
  async employeeRolesItems(
    @graphql.Args() args: EmployeeRolesFindManyArgs
  ): Promise<EmployeeRoles[]> {
    return this.service.employeeRolesItems(args);
  }

  @graphql.Query(() => EmployeeRoles, { nullable: true })
  async employeeRoles(
    @graphql.Args() args: EmployeeRolesFindUniqueArgs
  ): Promise<EmployeeRoles | null> {
    const result = await this.service.employeeRoles(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeRoles)
  async createEmployeeRoles(
    @graphql.Args() args: CreateEmployeeRolesArgs
  ): Promise<EmployeeRoles> {
    return await this.service.createEmployeeRoles({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeeRoles)
  async updateEmployeeRoles(
    @graphql.Args() args: UpdateEmployeeRolesArgs
  ): Promise<EmployeeRoles | null> {
    try {
      return await this.service.updateEmployeeRoles({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeRoles)
  async deleteEmployeeRoles(
    @graphql.Args() args: DeleteEmployeeRolesArgs
  ): Promise<EmployeeRoles | null> {
    try {
      return await this.service.deleteEmployeeRoles(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employees, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: EmployeeRoles
  ): Promise<Employees | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Roles, {
    nullable: true,
    name: "role",
  })
  async getRole(
    @graphql.Parent() parent: EmployeeRoles
  ): Promise<Roles | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
