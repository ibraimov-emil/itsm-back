/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsDate, ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { EmployeeProjects } from "../../employeeProjects/base/EmployeeProjects";
import { Services } from "../../services/base/Services";
import { Clients } from "../../clients/base/Clients";
import { Statuses } from "../../statuses/base/Statuses";
import { Requests } from "../../requests/base/Requests";

@ObjectType()
class Projects {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [EmployeeProjects],
  })
  @ValidateNested()
  @Type(() => EmployeeProjects)
  @IsOptional()
  employeeProjectsItems?: Array<EmployeeProjects>;

  @ApiProperty({
    required: false,
    type: () => Services,
  })
  @ValidateNested()
  @Type(() => Services)
  @IsOptional()
  service?: Services | null;

  @ApiProperty({
    required: false,
    type: () => Clients,
  })
  @ValidateNested()
  @Type(() => Clients)
  @IsOptional()
  client?: Clients | null;

  @ApiProperty({
    required: false,
    type: () => Statuses,
  })
  @ValidateNested()
  @Type(() => Statuses)
  @IsOptional()
  status?: Statuses | null;

  @ApiProperty({
    required: false,
    type: () => Requests,
  })
  @ValidateNested()
  @Type(() => Requests)
  @IsOptional()
  request?: Requests | null;
}

export { Projects as Projects };
