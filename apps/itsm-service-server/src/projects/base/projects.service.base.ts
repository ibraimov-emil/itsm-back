/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Projects as PrismaProjects,
  EmployeeProjects as PrismaEmployeeProjects,
  Services as PrismaServices,
  Clients as PrismaClients,
  Statuses as PrismaStatuses,
  Requests as PrismaRequests,
} from "@prisma/client";

export class ProjectsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProjectsCountArgs, "select">): Promise<number> {
    return this.prisma.projects.count(args);
  }

  async projectsItems(
    args: Prisma.ProjectsFindManyArgs
  ): Promise<PrismaProjects[]> {
    return this.prisma.projects.findMany(args);
  }
  async projects(
    args: Prisma.ProjectsFindUniqueArgs
  ): Promise<PrismaProjects | null> {
    return this.prisma.projects.findUnique(args);
  }
  async createProjects(
    args: Prisma.ProjectsCreateArgs
  ): Promise<PrismaProjects> {
    return this.prisma.projects.create(args);
  }
  async updateProjects(
    args: Prisma.ProjectsUpdateArgs
  ): Promise<PrismaProjects> {
    return this.prisma.projects.update(args);
  }
  async deleteProjects(
    args: Prisma.ProjectsDeleteArgs
  ): Promise<PrismaProjects> {
    return this.prisma.projects.delete(args);
  }

  async findEmployeeProjectsItems(
    parentId: string,
    args: Prisma.EmployeeProjectsFindManyArgs
  ): Promise<PrismaEmployeeProjects[]> {
    return this.prisma.projects
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeProjectsItems(args);
  }

  async getService(parentId: string): Promise<PrismaServices | null> {
    return this.prisma.projects
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }

  async getClient(parentId: string): Promise<PrismaClients | null> {
    return this.prisma.projects
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }

  async getStatus(parentId: string): Promise<PrismaStatuses | null> {
    return this.prisma.projects
      .findUnique({
        where: { id: parentId },
      })
      .status();
  }

  async getRequest(parentId: string): Promise<PrismaRequests | null> {
    return this.prisma.projects
      .findUnique({
        where: { id: parentId },
      })
      .request();
  }
}
