/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IncidentsService } from "../incidents.service";
import { IncidentsCreateInput } from "./IncidentsCreateInput";
import { Incidents } from "./Incidents";
import { IncidentsFindManyArgs } from "./IncidentsFindManyArgs";
import { IncidentsWhereUniqueInput } from "./IncidentsWhereUniqueInput";
import { IncidentsUpdateInput } from "./IncidentsUpdateInput";

export class IncidentsControllerBase {
  constructor(protected readonly service: IncidentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Incidents })
  async createIncidents(
    @common.Body() data: IncidentsCreateInput
  ): Promise<Incidents> {
    return await this.service.createIncidents({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Incidents] })
  @ApiNestedQuery(IncidentsFindManyArgs)
  async incidentsItems(@common.Req() request: Request): Promise<Incidents[]> {
    const args = plainToClass(IncidentsFindManyArgs, request.query);
    return this.service.incidentsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Incidents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async incidents(
    @common.Param() params: IncidentsWhereUniqueInput
  ): Promise<Incidents | null> {
    const result = await this.service.incidents({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Incidents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIncidents(
    @common.Param() params: IncidentsWhereUniqueInput,
    @common.Body() data: IncidentsUpdateInput
  ): Promise<Incidents | null> {
    try {
      return await this.service.updateIncidents({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Incidents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIncidents(
    @common.Param() params: IncidentsWhereUniqueInput
  ): Promise<Incidents | null> {
    try {
      return await this.service.deleteIncidents({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
