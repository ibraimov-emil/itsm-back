/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Incidents as PrismaIncidents } from "@prisma/client";

export class IncidentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IncidentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.incidents.count(args);
  }

  async incidentsItems(
    args: Prisma.IncidentsFindManyArgs
  ): Promise<PrismaIncidents[]> {
    return this.prisma.incidents.findMany(args);
  }
  async incidents(
    args: Prisma.IncidentsFindUniqueArgs
  ): Promise<PrismaIncidents | null> {
    return this.prisma.incidents.findUnique(args);
  }
  async createIncidents(
    args: Prisma.IncidentsCreateArgs
  ): Promise<PrismaIncidents> {
    return this.prisma.incidents.create(args);
  }
  async updateIncidents(
    args: Prisma.IncidentsUpdateArgs
  ): Promise<PrismaIncidents> {
    return this.prisma.incidents.update(args);
  }
  async deleteIncidents(
    args: Prisma.IncidentsDeleteArgs
  ): Promise<PrismaIncidents> {
    return this.prisma.incidents.delete(args);
  }
}
