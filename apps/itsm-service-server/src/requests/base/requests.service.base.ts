/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Requests as PrismaRequests,
  Projects as PrismaProjects,
} from "@prisma/client";

export class RequestsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RequestsCountArgs, "select">): Promise<number> {
    return this.prisma.requests.count(args);
  }

  async requestsItems(
    args: Prisma.RequestsFindManyArgs
  ): Promise<PrismaRequests[]> {
    return this.prisma.requests.findMany(args);
  }
  async requests(
    args: Prisma.RequestsFindUniqueArgs
  ): Promise<PrismaRequests | null> {
    return this.prisma.requests.findUnique(args);
  }
  async createRequests(
    args: Prisma.RequestsCreateArgs
  ): Promise<PrismaRequests> {
    return this.prisma.requests.create(args);
  }
  async updateRequests(
    args: Prisma.RequestsUpdateArgs
  ): Promise<PrismaRequests> {
    return this.prisma.requests.update(args);
  }
  async deleteRequests(
    args: Prisma.RequestsDeleteArgs
  ): Promise<PrismaRequests> {
    return this.prisma.requests.delete(args);
  }

  async findProjectsItems(
    parentId: string,
    args: Prisma.ProjectsFindManyArgs
  ): Promise<PrismaProjects[]> {
    return this.prisma.requests
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .projectsItems(args);
  }
}
