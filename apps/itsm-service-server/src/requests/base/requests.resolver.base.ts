/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Requests } from "./Requests";
import { RequestsCountArgs } from "./RequestsCountArgs";
import { RequestsFindManyArgs } from "./RequestsFindManyArgs";
import { RequestsFindUniqueArgs } from "./RequestsFindUniqueArgs";
import { CreateRequestsArgs } from "./CreateRequestsArgs";
import { UpdateRequestsArgs } from "./UpdateRequestsArgs";
import { DeleteRequestsArgs } from "./DeleteRequestsArgs";
import { ProjectsFindManyArgs } from "../../projects/base/ProjectsFindManyArgs";
import { Projects } from "../../projects/base/Projects";
import { RequestsService } from "../requests.service";
@graphql.Resolver(() => Requests)
export class RequestsResolverBase {
  constructor(protected readonly service: RequestsService) {}

  async _requestsItemsMeta(
    @graphql.Args() args: RequestsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Requests])
  async requestsItems(
    @graphql.Args() args: RequestsFindManyArgs
  ): Promise<Requests[]> {
    return this.service.requestsItems(args);
  }

  @graphql.Query(() => Requests, { nullable: true })
  async requests(
    @graphql.Args() args: RequestsFindUniqueArgs
  ): Promise<Requests | null> {
    const result = await this.service.requests(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Requests)
  async createRequests(
    @graphql.Args() args: CreateRequestsArgs
  ): Promise<Requests> {
    return await this.service.createRequests({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Requests)
  async updateRequests(
    @graphql.Args() args: UpdateRequestsArgs
  ): Promise<Requests | null> {
    try {
      return await this.service.updateRequests({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Requests)
  async deleteRequests(
    @graphql.Args() args: DeleteRequestsArgs
  ): Promise<Requests | null> {
    try {
      return await this.service.deleteRequests(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Projects], { name: "projectsItems" })
  async findProjectsItems(
    @graphql.Parent() parent: Requests,
    @graphql.Args() args: ProjectsFindManyArgs
  ): Promise<Projects[]> {
    const results = await this.service.findProjectsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
