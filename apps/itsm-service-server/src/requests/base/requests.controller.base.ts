/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RequestsService } from "../requests.service";
import { RequestsCreateInput } from "./RequestsCreateInput";
import { Requests } from "./Requests";
import { RequestsFindManyArgs } from "./RequestsFindManyArgs";
import { RequestsWhereUniqueInput } from "./RequestsWhereUniqueInput";
import { RequestsUpdateInput } from "./RequestsUpdateInput";
import { ProjectsFindManyArgs } from "../../projects/base/ProjectsFindManyArgs";
import { Projects } from "../../projects/base/Projects";
import { ProjectsWhereUniqueInput } from "../../projects/base/ProjectsWhereUniqueInput";

export class RequestsControllerBase {
  constructor(protected readonly service: RequestsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Requests })
  async createRequests(
    @common.Body() data: RequestsCreateInput
  ): Promise<Requests> {
    return await this.service.createRequests({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Requests] })
  @ApiNestedQuery(RequestsFindManyArgs)
  async requestsItems(@common.Req() request: Request): Promise<Requests[]> {
    const args = plainToClass(RequestsFindManyArgs, request.query);
    return this.service.requestsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Requests })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async requests(
    @common.Param() params: RequestsWhereUniqueInput
  ): Promise<Requests | null> {
    const result = await this.service.requests({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Requests })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRequests(
    @common.Param() params: RequestsWhereUniqueInput,
    @common.Body() data: RequestsUpdateInput
  ): Promise<Requests | null> {
    try {
      return await this.service.updateRequests({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Requests })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRequests(
    @common.Param() params: RequestsWhereUniqueInput
  ): Promise<Requests | null> {
    try {
      return await this.service.deleteRequests({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/projectsItems")
  @ApiNestedQuery(ProjectsFindManyArgs)
  async findProjectsItems(
    @common.Req() request: Request,
    @common.Param() params: RequestsWhereUniqueInput
  ): Promise<Projects[]> {
    const query = plainToClass(ProjectsFindManyArgs, request.query);
    const results = await this.service.findProjectsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        service: {
          select: {
            id: true,
          },
        },

        client: {
          select: {
            id: true,
          },
        },

        status: {
          select: {
            id: true,
          },
        },

        request: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projectsItems")
  async connectProjectsItems(
    @common.Param() params: RequestsWhereUniqueInput,
    @common.Body() body: ProjectsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectsItems: {
        connect: body,
      },
    };
    await this.service.updateRequests({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projectsItems")
  async updateProjectsItems(
    @common.Param() params: RequestsWhereUniqueInput,
    @common.Body() body: ProjectsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectsItems: {
        set: body,
      },
    };
    await this.service.updateRequests({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projectsItems")
  async disconnectProjectsItems(
    @common.Param() params: RequestsWhereUniqueInput,
    @common.Body() body: ProjectsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectsItems: {
        disconnect: body,
      },
    };
    await this.service.updateRequests({
      where: params,
      data,
      select: { id: true },
    });
  }
}
