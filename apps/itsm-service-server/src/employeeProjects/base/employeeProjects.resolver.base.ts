/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmployeeProjects } from "./EmployeeProjects";
import { EmployeeProjectsCountArgs } from "./EmployeeProjectsCountArgs";
import { EmployeeProjectsFindManyArgs } from "./EmployeeProjectsFindManyArgs";
import { EmployeeProjectsFindUniqueArgs } from "./EmployeeProjectsFindUniqueArgs";
import { CreateEmployeeProjectsArgs } from "./CreateEmployeeProjectsArgs";
import { UpdateEmployeeProjectsArgs } from "./UpdateEmployeeProjectsArgs";
import { DeleteEmployeeProjectsArgs } from "./DeleteEmployeeProjectsArgs";
import { Employees } from "../../employees/base/Employees";
import { Projects } from "../../projects/base/Projects";
import { EmployeeProjectsService } from "../employeeProjects.service";
@graphql.Resolver(() => EmployeeProjects)
export class EmployeeProjectsResolverBase {
  constructor(protected readonly service: EmployeeProjectsService) {}

  async _employeeProjectsItemsMeta(
    @graphql.Args() args: EmployeeProjectsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeProjects])
  async employeeProjectsItems(
    @graphql.Args() args: EmployeeProjectsFindManyArgs
  ): Promise<EmployeeProjects[]> {
    return this.service.employeeProjectsItems(args);
  }

  @graphql.Query(() => EmployeeProjects, { nullable: true })
  async employeeProjects(
    @graphql.Args() args: EmployeeProjectsFindUniqueArgs
  ): Promise<EmployeeProjects | null> {
    const result = await this.service.employeeProjects(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeProjects)
  async createEmployeeProjects(
    @graphql.Args() args: CreateEmployeeProjectsArgs
  ): Promise<EmployeeProjects> {
    return await this.service.createEmployeeProjects({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeeProjects)
  async updateEmployeeProjects(
    @graphql.Args() args: UpdateEmployeeProjectsArgs
  ): Promise<EmployeeProjects | null> {
    try {
      return await this.service.updateEmployeeProjects({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeProjects)
  async deleteEmployeeProjects(
    @graphql.Args() args: DeleteEmployeeProjectsArgs
  ): Promise<EmployeeProjects | null> {
    try {
      return await this.service.deleteEmployeeProjects(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employees, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: EmployeeProjects
  ): Promise<Employees | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Projects, {
    nullable: true,
    name: "project",
  })
  async getProject(
    @graphql.Parent() parent: EmployeeProjects
  ): Promise<Projects | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
