/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeProjectsService } from "../employeeProjects.service";
import { EmployeeProjectsCreateInput } from "./EmployeeProjectsCreateInput";
import { EmployeeProjects } from "./EmployeeProjects";
import { EmployeeProjectsFindManyArgs } from "./EmployeeProjectsFindManyArgs";
import { EmployeeProjectsWhereUniqueInput } from "./EmployeeProjectsWhereUniqueInput";
import { EmployeeProjectsUpdateInput } from "./EmployeeProjectsUpdateInput";

export class EmployeeProjectsControllerBase {
  constructor(protected readonly service: EmployeeProjectsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeProjects })
  async createEmployeeProjects(
    @common.Body() data: EmployeeProjectsCreateInput
  ): Promise<EmployeeProjects> {
    return await this.service.createEmployeeProjects({
      data: {
        ...data,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeProjects] })
  @ApiNestedQuery(EmployeeProjectsFindManyArgs)
  async employeeProjectsItems(
    @common.Req() request: Request
  ): Promise<EmployeeProjects[]> {
    const args = plainToClass(EmployeeProjectsFindManyArgs, request.query);
    return this.service.employeeProjectsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeProjects })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employeeProjects(
    @common.Param() params: EmployeeProjectsWhereUniqueInput
  ): Promise<EmployeeProjects | null> {
    const result = await this.service.employeeProjects({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeProjects })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployeeProjects(
    @common.Param() params: EmployeeProjectsWhereUniqueInput,
    @common.Body() data: EmployeeProjectsUpdateInput
  ): Promise<EmployeeProjects | null> {
    try {
      return await this.service.updateEmployeeProjects({
        where: params,
        data: {
          ...data,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          project: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeProjects })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployeeProjects(
    @common.Param() params: EmployeeProjectsWhereUniqueInput
  ): Promise<EmployeeProjects | null> {
    try {
      return await this.service.deleteEmployeeProjects({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          project: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
